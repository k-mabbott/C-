// Add to Program.cs for Session

builder.Services.AddHttpContextAccessor();  
builder.Services.AddSession(); 

app.UseSession(); 

**
USING SESSION 
 -Set
HttpContext.Session.SetString("UserName", "Samantha");
HttpContext.Session.SetInt32("UserAge", 28);

 -Get
string LocalVariable = HttpContext.Session.GetString("UserName");
int? IntVariable = HttpContext.Session.GetInt32("UserAge");

-Clear
HttpContext.Session.Clear();

-Get Session in View
@Context.Session.GetString("KeyName")
-------------------------------------------------

// Disable null warnings in controller 

#pragma warning disable CS8618

-------------------------------------------------
New MVC Project. 

dotnet new mvc --no-https -o ProjectName

* For Entity framework

dotnet add package Pomelo.EntityFrameworkCore.MySql --version 6.0.1
dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.3

-------------------------------------------------

Model Example 

#pragma warning disable CS8618
using System.ComponentModel.DataAnnotations;
namespace YourProjectName.Models;
public class Monster
{
    [Key]
    public int MonsterId { get; set; }
    public string Name { get; set; } 
    public int Height { get; set; }
    public string Description { get; set; }
    public DateTime CreatedAt { get; set; } = DateTime.Now;
    public DateTime UpdatedAt { get; set; } = DateTime.Now;
}
                


-------------------------------------------------

Models/MyContext.cs

#pragma warning disable CS8618
// We can disable our warnings safely because we know the framework will assign non-null values 
// when it constructs this class for us.
using Microsoft.EntityFrameworkCore;
namespace YourProjectName.Models;
// the MyContext class represents a session with our MySQL database, allowing us to query for or save data
// DbContext is a class that comes from EntityFramework, we want to inherit its features
public class MyContext : DbContext 
{   
    // This line will always be here. It is what constructs our context upon initialization  
    public MyContext(DbContextOptions options) : base(options) { }    
    // We need to create a new DbSet<Model> for every model in our project that is making a table
    // The name of our table in our database will be based on the name we provide here
    // This is where we provide a plural version of our model to fit table naming standards    
    public DbSet<Monster> Monsters { get; set; } 
}

-------------------------------------------------
CONNECTING TO MY SQL
-------------------------------------------------
appsettings.json

 "AllowedHosts": "*",    
    "ConnectionStrings":    
    {        
        "DefaultConnection": "Server=localhost;port=3306;userid=root;password=root;database=!!monsterdb;"    
    }

Program.cs

// Add this using statement
using Microsoft.EntityFrameworkCore;
// You will need access to your models for your context file
using ProjectName.Models;
// Builder code from before
var builder = WebApplication.CreateBuilder(args);
// Create a variable to hold your connection string
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
// All your builder.services go here
// And we will add one more service
// Make sure this is BEFORE var app = builder.Build()!!
builder.Services.AddDbContext<MyContext>(options =>
{
    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
});

-------------------------------------------------


-------------------------------------------------