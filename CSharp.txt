-------------------------------------------------
New MVC Project. 
-------------------------------------------------

dotnet new mvc --no-https -o ProjectName

* For Entity framework

dotnet add package Pomelo.EntityFrameworkCore.MySql --version 6.0.1
dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.3


-----------------------------------
// Add to Program.cs for Session   
-----------------------------------

builder.Services.AddHttpContextAccessor();  
builder.Services.AddSession(); 

app.UseSession(); 

**
USING SESSION 
 -Set
HttpContext.Session.SetString("UserName", "Samantha");
HttpContext.Session.SetInt32("UserAge", 28);

 -Get
string LocalVariable = HttpContext.Session.GetString("UserName");
int? IntVariable = HttpContext.Session.GetInt32("UserAge");

-Clear
HttpContext.Session.Clear();

-Get Session in View
@Context.Session.GetString("KeyName")
-------------------------------------------------
Insert into model.cs
-------------------------------------------------

// Disable null warnings in model

#pragma warning disable CS8618

// For validations

using System.ComponentModel.DataAnnotations;

-------------------------------------------------


           


-------------------------------------------------
Models/MyContext.cs
-------------------------------------------------

#pragma warning disable CS8618
// We can disable our warnings safely because we know the framework will assign non-null values 
// when it constructs this class for us.
using Microsoft.EntityFrameworkCore;
namespace YourProjectName.Models;
// the MyContext class represents a session with our MySQL database, allowing us to query for or save data
// DbContext is a class that comes from EntityFramework, we want to inherit its features
public class MyContext : DbContext 
{   
    // This line will always be here. It is what constructs our context upon initialization  
    public MyContext(DbContextOptions options) : base(options) { }    
    // We need to create a new DbSet<Model> for every model in our project that is making a table
    // The name of our table in our database will be based on the name we provide here
    // This is where we provide a plural version of our model to fit table naming standards    
    public DbSet<Monster> Monsters { get; set; } 
}

-------------------------------------------------
CONNECTING TO MY SQL
-------------------------------------------------
appsettings.json

 "AllowedHosts": "*",    
    "ConnectionStrings":    
    {        
        "DefaultConnection": "Server=localhost;port=3306;userid=root;password=root;database=!!monsterdb;"    
    }

-------------------------------------------------
Program.cs
-------------------------------------------------

// Add this using statement
using Microsoft.EntityFrameworkCore;
// You will need access to your models for your context file
using ProjectName.Models;
// Builder code from before

var builder = WebApplication.CreateBuilder(args);       // This already Exists |
// Create a variable to hold your connection string     // This already Exists |

var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
// All your builder.services go here
// And we will add one more service

// Make sure this is BEFORE var app = builder.Build()!!
builder.Services.AddDbContext<MyContext>(options =>
{
    options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
});


-------------------------------------------------
Add to Controller for connection to DB 
-------------------------------------------------
  
   // Add

   private MyContext _context;

   public HomeController(ILogger<HomeController> logger, MyContext context)
    {        
        _logger = logger;
        _context = context;    
    }


-------------------------------------------------
Model Example 
-------------------------------------------------

#pragma warning disable CS8618
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
namespace YourProjectName.Models;
public class Monster
{
    [Key]
    public int MonsterId { get; set; }
    public string Name { get; set; } 
    public int Height { get; set; }
    public string Description { get; set; }
    public DateTime CreatedAt { get; set; } = DateTime.Now;
    public DateTime UpdatedAt { get; set; } = DateTime.Now;
}


-------------------------------------------------
Controller Example 
-------------------------------------------------

// Using statements
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using YourProjectName.Models;
namespace YourProjectName.Controllers;    
public class HomeController : Controller
{    
    private readonly ILogger<HomeController> _logger;
    // Add a private variable of type MyContext (or whatever you named your context file)
    private MyContext _context;         
    // Here we can "inject" our context service into the constructor 
    // The "logger" was something that was already in our code, we're just adding around it   
    public HomeController(ILogger<HomeController> logger, MyContext context)    
    {        
        _logger = logger;
        // When our HomeController is instantiated, it will fill in _context with context
        // Remember that when context is initialized, it brings in everything we need from DbContext
        // which comes from Entity Framework Core
        _context = context;    
    }         
    [HttpGet("")]    
    public IActionResult Index()    
    {     
        // Now any time we want to access our database we use _context   
        List<Monster> AllMonsters = _context.Monsters.ToList();
        return View();    
    } 
}


-------------------------------------------------
How to do Migrations
-------------------------------------------------

dotnet ef migrations add !!FirstMigration     // !! HAVE to change the name each time. 

dotnet ef database update                   // Apply changes to Database.

dotnet ef migrations add FirstMigration -v  // If failed This code with the added '-v' Can show errors


-------------------------------------------------
Partials
-------------------------------------------------
_ViewImports.cshtml
// Should Include this.
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers


**EXAMPLE 

  - _Navbar.cshtml

<ul>        
    <li><a href="/">Home</a></li>        
    <li><a href="/about">About Me</a></li>    
</ul>

** HOW TO LOAD 
<p></p>
@await Html.PartialAsync("_Navbar")
<p></p>


-------------------------------------------------
Login / Registration
-------------------------------------------------
// For Model 
using Microsoft.AspNetCore.Identity;

[RegularExpression(@"^[a-zA-Z0-9.+_-]+@[a-zA-Z0-9._-]+\.[a-zA-Z]+$", ErrorMessage = "Invalid email format")]

// For Controller 
using Microsoft.AspNetCore.Mvc.Filters;


        if(ModelState.IsValid)        
        {
            // Initializing a PasswordHasher object, providing our User class as its type            
            PasswordHasher<User> Hasher = new PasswordHasher<User>();   
            // Updating our newUser's password to a hashed version         
            newUser.Password = Hasher.HashPassword(newUser, newUser.Password);            
            //Save your user object to the database 
            _context.Add(newUser);
            _context.SaveChanges();       
        } else {
            // handle else
        }  



-------------------------------------------------
One to Many 
-------------------------------------------------
 ** Model

eg. Users have Posts. 

// Add to User - public List<Post> AllPosts { get; set; } = new List<Post>();
// Add to Post - public int UserId { get; set; }
               - public User? Author { get; set; } // Navigation property

-------------------------------------------------

** Controller
//Must have for Inlucdes
using Microsoft.EntityFrameworkCore; 

Example Queries

// All posts with authors.
    List<Post> AllPosts = _context.Posts.Include(c => c.Author).ToList();  
  
// All posts by a single user.    
    User? MyUser = _context.Users.Include( p => p.AllPosts).FirstOrDefault(i => i.UserId == id);


// Number of posts created by this User    
int numPosts = _context.Users        
// Including Posts, so that we may query on this field        
                        .Include(user => user.AllPosts)        
// Get a User with a particular UserId        
                        .FirstOrDefault(user => user.UserId == userId)        
// Now, with a reference to a User object, and access to a User's Posts
// we can get the .Count property of the Posts List        
                        .AllPosts.Count;
         
// User with the longest Post, we can do this in two stages    
// First, find the Length of the longest Post
int longestPostLength = _context.Posts.Max(post => post.Content.Length);         
// Second, select one User whose AllPosts has Any that matches this character count    
// Note here that AllPosts is a List, and thus can take a LINQ expression such as .Any()    
User userWithLongest = _context.Users        
                               .Include(user => user.AllPosts)        
                               .FirstOrDefault(user => user.AllPosts
                               .Any(c => c.Content.Length == longestPostLength));         
// Posts NOT related to this User:    
// Since this query only requires checking a Post's UserId    
// and doesn't require us to check data contained in a Post's Creator    
// we can do this WITHOUT a .Include()    
List<Post> unrelatedPosts = _context.Posts.Where(c => c.UserId != userId).ToList();




-------------------------------------------------
Many to Many 
-------------------------------------------------
----------------------** Magazine.cs
public class Magazine
{    
    [Key]
    public int MagazineId { get; set; }    
    public string Title { get; set; }  
    // CreatedAt and UpdatedAt removed for brevity
    // Our navigation property to our Subscription class
    // Notice there is NO reference to the Person class   
    public List<Subscription> Readers { get; set; } = new List<Subscription>();
}
----------------------** Person.cs
public class Person
{    
    [Key]
    public int PersonId { get; set; }    
    public string Name { get; set; }  
    // CreatedAt and UpdatedAt removed for brevity
    // Our Person class also needs a reference to Subscriptions
    // and contains NO reference to Magazines  
    public List<Subscription> Subscriptions { get; set; } = new List<Subscription>();
}
----------------------**Subscription.cs
public class Subscription
{
    [Key]    
    public int SubscriptionId { get; set; } 
    // The IDs linking to the adjoining tables   
    public int PersonId { get; set; }    
    public int MagazineId { get; set; }
    // Our navigation properties - don't forget the ?    
    public Person? Person { get; set; }    
    public Magazine? Magazine { get; set; }
}

----------------------** YourContext.cs
public DbSet<Person> People { get; set; } 
public DbSet<Magazine> Magazines { get; set; } 
public DbSet<Subscription> Subscriptions { get; set; } 


----------------------** CALLING THEM **
Person personWithMags = _context.People    	
                                .Include(subs => subs.Subscriptions)            
                                .ThenInclude(sub => sub.Magazine)        
                                .FirstOrDefault(person => person.PersonId == personId);

----------------------** Rendering them **
@model Person
<h1>Subscriptions for @Model.Name</h1>
@foreach(Subscription sub in Model.Subscriptions)
{    
    <p>@sub.Magazine.Title</p>
}












     